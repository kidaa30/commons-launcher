<project name="commons-launcher" default="compile" basedir=".">


<!--
        "Launcher" component of the Jakarta Commons Subproject
        $Id: build.xml,v 1.1 2002/10/25 09:03:15 remm Exp $
-->


<!-- ========== Initialize Properties ===================================== -->


  <property file="build.properties"/>                <!-- Component local   -->
  <property file="../build.properties"/>             <!-- Commons local     -->
  <property file="${user.home}/build.properties"/>   <!-- User local        -->


<!-- ========== External Dependencies ===================================== -->


  <!-- The directory containing your binary distribution of JUnit,
       version 3.7 or later -->
  <property name="junit.home"              value="/usr/local/junit3.7"/>


<!-- ========== Derived Values ============================================ -->


  <!-- The pathname of the "junit.jar" JAR file -->
  <property name="junit.jar"               value="${junit.home}/junit.jar"/>


<!-- ========== Component Declarations ==================================== -->


  <!-- The name of this component -->
  <property name="component.name"          value="launcher"/>

  <!-- The primary package name of this component -->
  <property name="component.package"       value="org.apache.commons.launcher"/>

  <!-- The title of this component -->
  <property name="component.title"         value="Launcher"/>

  <!-- The current version number of this component -->
  <property name="component.version"       value="1.0-dev"/>

  <!-- The base directory for compilation targets -->
  <property name="build.home"              value="target"/>

  <!-- The base directory for component executable files -->
  <property name="bin.home"                value="src/bin"/>

  <!-- The base directory for component configuration files -->
  <property name="conf.home"               value="src/conf"/>

  <!-- The base directory for distribution targets -->
  <property name="dist.home"               value="dist"/>

  <!-- The base directory for distribution targets -->
  <property name="release.home"            value="release"/>
  <property name="release.version"         value=""/>

  <!-- The base directory for component sources -->
  <property name="source.home"             value="src/java"/>

  <!-- The base directory for unit test sources -->
  <property name="test.home"               value="src/test"/>


<!-- ========== Compiler Defaults ========================================= -->


  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug"           value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation"     value="true"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize"        value="true"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.home}/classes"/>
  </path>


<!-- ========== Test Execution Defaults =================================== -->


  <!-- Construct unit test classpath -->
  <path id="test.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${build.home}/tests"/>
    <pathelement location="${junit.jar}"/>
  </path>

  <!-- Should all tests fail if one does? -->
  <property name="test.failonerror"        value="true"/>

  <!-- The test runner to execute -->
  <property name="test.runner"             value="junit.textui.TestRunner"/>


<!-- ========== Executable Targets ======================================== -->


  <target name="init"
   description="Initialize and evaluate conditionals">
    <echo message="-------- ${component.name} ${component.version} --------"/>
    <filter  token="name"                  value="${component.name}"/>
    <filter  token="package"               value="${component.package}"/>
    <filter  token="version"               value="${component.version}"/>
  </target>


  <target name="prepare" depends="init"
   description="Prepare build directory">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/classes"/>
    <mkdir dir="${build.home}/conf"/>
    <mkdir dir="${build.home}/tests"/>
  </target>


  <target name="static" depends="prepare"
   description="Copy static files to build directory">
    <tstamp/>
    <copy  todir="${build.home}/conf" filtering="on">
      <fileset dir="${conf.home}" includes="*.MF"/>
    </copy>
  </target>


  <target name="compile" depends="static"
   description="Compile shareable components">
    <javac  srcdir="${source.home}"
           destdir="${build.home}/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <!-- Copy all of the resource files -->
    <copy    todir="${build.home}/classes" filtering="on">
      <fileset dir="${source.home}" excludes="**/*.java"/>
    </copy>
    <!-- Make the English resource files the default resource -->
    <copy    todir="${build.home}/classes" filtering="on">
      <fileset dir="${source.home}" includes="**/*_en.properties"/>
      <mapper type="glob" from="*_en.properties" to="*.properties"/>
    </copy>
  </target>


  <target name="compile.tests" depends="compile"
   description="Compile unit test cases">
    <javac  srcdir="${test.home}"
           destdir="${build.home}/tests"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="test.classpath"/>
    </javac>
    <copy    todir="${build.home}/tests" filtering="on">
      <fileset dir="${test.home}" excludes="**/*.java"/>
    </copy>
  </target>


  <target name="clean"
   description="Clean build and distribution directories">
    <delete    dir="${build.home}"/>
    <delete    dir="${dist.home}"/>
    <delete    dir="${release.home}"/>
    <delete   file="commons-${component.name}.jar"/>
  </target>


  <target name="all" depends="clean,compile"
   description="Clean and compile all components"/>


  <target name="javadoc" depends="compile"
   description="Create component Javadoc documentation">
    <mkdir      dir="${dist.home}"/>
    <mkdir      dir="${dist.home}/docs"/>
    <mkdir      dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="${source.home}"
                destdir="${dist.home}/docs/api"
           packagenames="org.apache.commons.*"
                 author="true"
                version="true"
               doctitle="&lt;h1&gt;${component.title}&lt;/h1&gt;"
            windowtitle="${component.title} (Version ${component.version})"
                 bottom="Copyright (c) 2001-2002 - Apache Software Foundation">
      <classpath refid="compile.classpath"/>
      <classpath location="${ant.home}/lib/ant.jar"/>
    </javadoc>
  </target>


  <target name="dist" depends="compile,javadoc"
   description="Create binary distribution">
    <mkdir      dir="${dist.home}"/>
    <mkdir      dir="${dist.home}/bin"/>
    <mkdir      dir="${dist.home}/lib"/>
    <mkdir      dir="${dist.home}/logs"/>
    <copy      file="LICENSE"
              todir="${dist.home}"/>
    <copy      file="RELEASE-NOTES.txt"
              todir="${dist.home}"/>
    <copy      file="${bin.home}/launcher.properties"
              todir="${dist.home}/bin"/>
    <copy      file="${bin.home}/launcher.xml"
              todir="${dist.home}/bin"/>
    <fixcrlf srcdir="${bin.home}"
           includes="launch-ant.bat"
            destdir="${dist.home}/bin"
                eol="crlf"/>
    <fixcrlf srcdir="${bin.home}"
           includes="launch-ant.sh"
            destdir="${dist.home}/bin"
                eol="lf"/>
    <chmod     file="${dist.home}/bin/launch-ant.sh"
               perm="a+x"/>
    <antcall target="jar"/>
    <!-- Bundle Ant jars to support launcher classes and sample scripts -->
    <copy     todir="${dist.home}/lib" filtering="off">
      <fileset dir="${ant.home}/lib" includes="*.jar"/>
    </copy>
    <fixcrlf srcdir="${ant.home}/bin"
           includes="antRun.bat"
            destdir="${dist.home}/bin"
                eol="crlf"/>
    <fixcrlf srcdir="${ant.home}/bin"
           includes="antRun"
            destdir="${dist.home}/bin"
                eol="lf"/>
    <chmod     file="${dist.home}/bin/antRun"
               perm="a+x"/>
    <pathconvert property="ant.jar.list" targetos="unix">
      <path>
        <fileset dir="dist/lib" includes="*.jar"/>
      </path>
    </pathconvert>
    <pathconvert property="dist.home.converted" targetos="unix">
      <path>
        <pathelement location="${dist.home}"/>
      </path>
    </pathconvert>
    <replace   file="${dist.home}/bin/launcher.properties">
      <replacefilter token="@ANTJARLIST@" value="${ant.jar.list}"/>
      <replacefilter token="${dist.home.converted}" value=".."/>
    </replace>
  </target>


  <target name="jar" depends="compile"
   description="Create jar">
    <mkdir      dir="${dist.home}"/>
    <mkdir      dir="${dist.home}/bin"/>
    <mkdir      dir="${build.home}/classes/META-INF"/>
    <copy      file="LICENSE"
             tofile="${build.home}/classes/META-INF/LICENSE.txt"/>
    <jar    jarfile="${dist.home}/bin/commons-${component.name}.jar"
            basedir="${build.home}/classes"
           manifest="${build.home}/conf/MANIFEST.MF"/>
    <copy      file="${build.home}/classes/LauncherBootstrap.class"
              todir="${dist.home}/bin"/>
  </target>


  <target name="install-jar" depends="jar"
   description="--> Installs jar file in ${lib.repo}">
    <copy todir="${lib.repo}" filtering="off">
      <fileset dir="${dist.home}">
        <include name="commons-${component.name}.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="release" depends="clean,dist"
   description="Create release distribution">

    <mkdir dir="${release.home}"/>

    <!-- Create binary distributions -->
	<tar compression="gzip"
     destfile="${release.home}/${ant.project.name}-${release.version}.tar.gz">
	  <tarfileset dir="${dist.home}" prefix="${ant.project.name}"/>
	</tar>
	<zip
     destfile="${release.home}/${ant.project.name}-${release.version}.zip">
	  <zipfileset dir="${dist.home}" prefix="${ant.project.name}"/>
	</zip>

    <!-- Create source distributions -->
	<tar compression="gzip"
     destfile="${release.home}/${ant.project.name}-src-${release.version}.tar.gz">
	  <tarfileset dir="${basedir}" prefix="${ant.project.name}">
        <exclude name="**/CVS/**"/>
        <exclude name="${build.home}/**"/>
        <exclude name="${dist.home}/**"/>
        <exclude name="${release.home}/**"/>
      </tarfileset>
	</tar>
	<zip
     destfile="${release.home}/${ant.project.name}-src-${release.version}.zip">
	  <zipfileset dir="${basedir}" prefix="${ant.project.name}">
        <exclude name="**/CVS/**"/>
        <exclude name="${build.home}/**"/>
        <exclude name="${dist.home}/**"/>
        <exclude name="${release.home}/**"/>
      </zipfileset>
	</zip>

  </target>

<!-- ========== Unit Test Targets ========================================= -->


  <target name="test"  depends="compile.tests"
   description="Run all unit test cases">
  </target>


</project>
